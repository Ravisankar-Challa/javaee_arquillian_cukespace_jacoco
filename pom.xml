<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>test_project</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>war</packaging>
    <properties>
       <!-- Explicitly declaring the source encoding eliminates the following
			message: -->
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- JBoss dependency versions -->
		<version.jboss.maven.plugin>7.7.Final</version.jboss.maven.plugin>

		<!-- other plugin versions -->
		<version.surefire.plugin>2.19.1</version.surefire.plugin>
		<version.war.plugin>2.6</version.war.plugin>

		<!-- dependencies versions -->
		<version.arquillian>1.1.9.Final</version.arquillian>
		<version.junit>4.12</version.junit>
		<version.javaee>7.0</version.javaee>
		<version.jacoco>0.7.4.201502262128</version.jacoco>
		<version.arquillian_jacoco>1.0.0.Alpha8</version.arquillian_jacoco>
		<version.arquillian>1.1.11.Final</version.arquillian>
		<verison.wildlfy.arquillian>1.0.2.Final</verison.wildlfy.arquillian>
        <verion.wildfly.aquillian.adapter>8.2.1.Final</verion.wildfly.aquillian.adapter>
		<version.cukespace>1.6.1</version.cukespace>
		<version.json_unit>1.9.0</version.json_unit>
		<version.wildfly.dist>10.0.0.Final</version.wildfly.dist>
		
		<!-- Java EE 6 and above doesn't require web.xml, Maven needs to catch up! -->
		<failOnMissingWebXml>false</failOnMissingWebXml>

		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>

		<!-- Tells SonarQube where the unit tests execution reports are -->
		<!-- <sonar.junit.reportsPath>target/reports/junit</sonar.junit.reportsPath> -->

		<!-- Tells SonarQube that the code coverage tool by unit tests is JaCoCo -->
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>

		<!-- Tells SonarQube where the unit tests code coverage report is -->
		<sonar.jacoco.reportPath>target/reports/jacoco/jacoco-ut.exec</sonar.jacoco.reportPath>

		<!-- Tells SonarQube where the integration tests code coverage report is -->
		<sonar.jacoco.itReportPath>target/reports/jacoco/jacoco-it.exec</sonar.jacoco.itReportPath>

		<!-- <sonar.tests>src/it/java,src/test/java</sonar.tests> -->
		<sonar.tests>src/it/java</sonar.tests>

	</properties>

	<dependencyManagement>
	     <dependencies>
	         <dependency>
	             <groupId>org.jboss.arquillian</groupId>
	             <artifactId>arquillian-bom</artifactId>
	             <version>${version.arquillian}</version>
	             <type>pom</type>
	             <scope>import</scope>
	         </dependency>
	     </dependencies>
	 </dependencyManagement>
	 
	<dependencies>

		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<scope>provided</scope>
			<version>${version.javaee}</version>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.188</version>
			<scope>test</scope>
		</dependency>

		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${version.junit}</version>
			<scope>test</scope>
		</dependency>
		
		<!-- Omitted because cuke space has mockito
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.10.19</version>
			<scope>test</scope>
		</dependency> 
		-->

		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>org.jacoco.core</artifactId>
			<version>${version.jacoco}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.extension</groupId>
			<artifactId>arquillian-jacoco</artifactId>
			<version>${version.arquillian_jacoco}</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>net.javacrumbs.json-unit</groupId>
			<artifactId>json-unit</artifactId>
			<version>${version.json_unit}</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
		    <groupId>com.github.cukespace</groupId>
		    <artifactId>cukespace-core</artifactId>
		    <version>${version.cukespace}</version>
		    <scope>test</scope>
		</dependency>
		
		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)
			JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>
		
		<dependency>
		   <groupId>org.jboss.shrinkwrap.resolver</groupId>
	        <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
	        <version>2.1.1</version>
	        <scope>test</scope>
	    </dependency>


		<!-- When tested in mac mini arquillian tests are not working with out
			the below dependency -->
		<dependency>
			<groupId>com.apple</groupId>
			<artifactId>AppleJavaExtensions</artifactId>
			<version>1.4</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name
			given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<!-- The JBoss AS plugin deploys your war to a local JBoss EAP container -->
			<!-- To use, run: mvn package jboss-as:deploy -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<version>${version.jboss.maven.plugin}</version>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run
				just unit tests based on a custom pattern -->
			<!-- Seperate profiles are provided for running all tests, including Arquillian
				tests that execute in the specified container -->
			<id>default</id>
			<!-- <activation> <property> <name>!default</name> </property> </activation> -->
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<testResources>
					<testResource>
						<directory>src/it/resources</directory>
					</testResource>
					<testResource>
						<directory>src/test/resources</directory>
					</testResource>
				</testResources>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>false</skip>
							<systemPropertyVariables>
								<arquillian.launch>jbosseap_remote</arquillian.launch>
							</systemPropertyVariables>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.9.1</version>
						<executions>
							<execution>
								<id>add-test-source</id>
								<phase>process-sources</phase>
								<goals>
									<goal>add-test-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>src/it/java</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>	
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.wildfly</groupId>
					<artifactId>wildfly-arquillian-container-remote</artifactId>
					<version>${verion.wildfly.aquillian.adapter}</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in your
				JBoss EAP instance -->
			<!-- This profile will start a new JBoss EAP instance, and execute the
				test, shutting it down when done -->
			<!-- Run with: mvn clean verify -Parq-jbosseap-managed -->
			<id>arq-jbosseap-managed</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>false</skip>
							<argLine>${jacoco.agent.ut.arg}</argLine>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>false</skip>
							<argLine>${jacoco.agent.it.arg}</argLine>
							<encoding>${project.build.sourceEncoding}</encoding>
							<systemPropertyVariables>
								<arquillian.launch>jbosseap_managed</arquillian.launch>
								<jboss.home>${project.basedir}/target/wildfly-${version.wildfly.dist}</jboss.home>
								<port-offset>-Djboss.socket.binding.port-offset=33</port-offset>
								<management.port>10023</management.port>
							</systemPropertyVariables>
							<reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
							<redirectTestOutputToFile>false</redirectTestOutputToFile>
						</configuration>
						<executions>
							<execution>
								<id>integration-test</id>
								<goals>
									<goal>integration-test</goal>
								</goals>
							</execution>
							<execution>
								<id>verify</id>
								<goals>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.9.1</version>
						<executions>
							<execution>
								<id>add-test-source</id>
								<phase>process-test-sources</phase>
								<goals>
									<goal>add-test-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>src/it/java</source>
									</sources>
								</configuration>
							</execution>
							<execution>
								<id>add-test-resources</id>
								<phase>generate-test-resources</phase>
								<goals>
									<goal>add-test-resource</goal>
								</goals>
								<configuration>
									<resources>
										<resource>
											<directory>src/it/resources</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>unpack</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.wildfly</groupId>
											<artifactId>wildfly-dist</artifactId>
											<version>${version.wildfly.dist}</version>
											<type>zip</type>
											<overWrite>false</overWrite>
											<outputDirectory>target</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${version.jacoco}</version>
						<executions>
							<execution>
								<configuration>
									<destFile>${sonar.jacoco.reportPath}</destFile>
									<!-- <dataFile>${sonar.jacoco.reportPath}</dataFile> -->
									<propertyName>jacoco.agent.ut.arg</propertyName>
									<append>true</append>
								</configuration>
								<id>pre-unit-test</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>post-unit-test</id>
								<phase>test</phase>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<dataFile>${sonar.jacoco.reportPath}</dataFile>
									<!-- Sets the output directory for the code coverage report. -->
									<outputDirectory>${project.reporting.outputDirectory}/jacoco/ut</outputDirectory>
								</configuration>
							</execution>
							<execution>
								<configuration>
									<destFile>${sonar.jacoco.itReportPath}</destFile>
									<!-- <dataFile>${sonar.jacoco.itReportPath}</dataFile> -->
									<propertyName>jacoco.agent.it.arg</propertyName>
									<append>true</append>
								</configuration>
								<id>pre-integration-test</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>report</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<dataFile>${sonar.jacoco.itReportPath}</dataFile>
									<!-- Sets the output directory for the code coverage report. -->
									<outputDirectory>${project.reporting.outputDirectory}/jacoco/it</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.wildfly</groupId>
					<artifactId>wildfly-arquillian-container-managed</artifactId>
					<version>${verion.wildfly.aquillian.adapter}</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>
	</profiles>
</project>